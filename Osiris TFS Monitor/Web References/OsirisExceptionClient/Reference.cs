//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18046.
// 
#pragma warning disable 1591

namespace Osiris.Tfs.Monitor.OsirisExceptionClient {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddNewExceptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Osiris.Tfs.Monitor.Properties.Settings.Default.OsirisTFSMonitor_OsirisExceptionClient_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddNewExceptionCompletedEventHandler AddNewExceptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewException", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewException(string teamProject, string reporter, string comment, string version, string exceptionMessage, string exceptionType, string exceptionTitle, string stackTrace, string theClass, string theMethod, string theSource, string changeSet, string username) {
            this.Invoke("AddNewException", new object[] {
                        teamProject,
                        reporter,
                        comment,
                        version,
                        exceptionMessage,
                        exceptionType,
                        exceptionTitle,
                        stackTrace,
                        theClass,
                        theMethod,
                        theSource,
                        changeSet,
                        username});
        }
        
        /// <remarks/>
        public void AddNewExceptionAsync(string teamProject, string reporter, string comment, string version, string exceptionMessage, string exceptionType, string exceptionTitle, string stackTrace, string theClass, string theMethod, string theSource, string changeSet, string username) {
            this.AddNewExceptionAsync(teamProject, reporter, comment, version, exceptionMessage, exceptionType, exceptionTitle, stackTrace, theClass, theMethod, theSource, changeSet, username, null);
        }
        
        /// <remarks/>
        public void AddNewExceptionAsync(string teamProject, string reporter, string comment, string version, string exceptionMessage, string exceptionType, string exceptionTitle, string stackTrace, string theClass, string theMethod, string theSource, string changeSet, string username, object userState) {
            if ((this.AddNewExceptionOperationCompleted == null)) {
                this.AddNewExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewExceptionOperationCompleted);
            }
            this.InvokeAsync("AddNewException", new object[] {
                        teamProject,
                        reporter,
                        comment,
                        version,
                        exceptionMessage,
                        exceptionType,
                        exceptionTitle,
                        stackTrace,
                        theClass,
                        theMethod,
                        theSource,
                        changeSet,
                        username}, this.AddNewExceptionOperationCompleted, userState);
        }
        
        private void OnAddNewExceptionOperationCompleted(object arg) {
            if ((this.AddNewExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddNewExceptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591